@page "/managemail"
@using System.Diagnostics
@using Flurl
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using GmailCleaner.Components.Gmail
@using GmailCleaner.Data.Gmail
@using GmailCleaner.Data.Gmail.Models
@using GmailCleaner.Services.GmailApi
@using Microsoft.EntityFrameworkCore

@inject NavigationManager _navigation
@inject ProtectedLocalStorage _localStorage

<BSContainer>
    <h3>Manage Mail</h3>
    @if (_loading)
    {
        <BSSpinner />   
    }
    else
    {
        <MailTable Messages="_storedMessages" />
    }
</BSContainer>

@code {
    private List<StoredMessage> _storedMessages = new();

    private string _authToken = string.Empty;
    private bool _loading = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadStoredMessagesAsync();
        await VerifyValidTokenAsync();
        await SyncMailAsync();

        await base.OnInitializedAsync();
    }

    private async Task VerifyValidTokenAsync()
    {
        var tokenResult = await _localStorage.GetAsync<string>("gmailAccessToken");
        var tokenExpiryResult = await _localStorage.GetAsync<long>("gmailAccessTokenExpiry");

        if (!tokenResult.Success || !tokenExpiryResult.Success)
        {
            Debug.WriteLine("TOKEN DIDN'T EXSIST... Getting new one");
            GetNewToken();
        }

        var tokenExpiry = tokenExpiryResult.Value;
        var now = DateTime.UtcNow.Millisecond;

        if (now > tokenExpiry)
        {
            Debug.WriteLine("TOKEN EXPIRED... Getting new one");
            GetNewToken();
        }

        Debug.WriteLine("Token was valid... doing nothing");
        _authToken = tokenResult.Value;
    }

    private void GetNewToken()
    {
        var authEndpoint = "https://accounts.google.com/o/oauth2/v2/auth"
            .SetQueryParams(new
            {
                client_id = "771093418835-kao6u6nmsqtmtbo0vuje4iar7k84a01k.apps.googleusercontent.com",
                redirect_uri = "https://localhost:7142/google/token",
                response_type = "token",
                scope = "https://mail.google.com/",
                include_granted_scopes = "true",
            });

        _navigation.NavigateTo(authEndpoint);
    }

    private async Task LoadStoredMessagesAsync()
    {
        using (var context = new GmailDbContext())
        {
            await context.Database.EnsureCreatedAsync();

            _storedMessages = await context.Messages.ToListAsync();
        }
    }

    private async Task SyncMailAsync()
    {
        _loading = true;
        
        var gmailApiService = new GmailApiService(_authToken);

        var userId = "smkoontz1@gmail.com";
        
        var messageListPage = await gmailApiService.ListMessagesAsync(userId);
        var messagePage = await gmailApiService.GetMessagesAsync(userId, messageListPage.Messages.Select(m => m.Id).ToArray());

        var storedMessages = messagePage.Select(m => new StoredMessage
        {
            GmailMessageId = m.Id,
            Sender = m.Payload.Headers.First(h => h.Name == "From").Value,
            Subject = m.Payload.Headers.First(h => h.Name == "Subject").Value
        });
        
        using (var context = new GmailDbContext())
        {
            context.Messages.AddRange(storedMessages);

            await context.SaveChangesAsync();

            _storedMessages = await context.Messages.ToListAsync();
        }

        _loading = false;
    }
}
